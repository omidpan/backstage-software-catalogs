apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: eks-cluster
  title: A service App on AWS EKS Cluster
  description: Deploy a Node.js Application on AWS EKS cluster using Terraform
  annotations:
    github.com/project-slug: omidpan/aws-eks  
spec:
  owner: user:developer1
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: App Name
          type: string
          description: Unique name for your app
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose a Repository location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Basic EKS Cluster Configuration
      required:
        - clusterName
        - awsRegion
        - action
        - envTag
      properties:
        clusterName:
          title: Cluster Name
          type: string
          description: the name of your cluster
          ui:autofocus: true
        awsRegion:
          title: AWS Region
          type: string
          description: The AWS region where the cluster will be deployed
          enum:
            - us-east-1
            - us-east-2
        action:
          title: Action
          type: string
          description: Action to perform with Terraform(apply/destroy)
          enum:
            - apply
            - destroy
        envTag:
          title: environment
          type: string
          description: which Env should be deployed(dev is enabled)
          enum:
            - dev
            - qa
            - stg
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        cookiecutterCompat: true
        values:
          name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
    - action: github:actions:dispatch
      name: Trigger Github Action 
      input:
        workflowId: manage-eks-cluster.yml
        repoUrl: github.com?repo=aws-eks&owner=omidpan
        branchOrTagName: 'main'  
        workflowInputs:
          clusterName: ${{parameters.clusterName}}
          awsRegion: ${{parameters.awsRegion}}
          action: ${{parameters.action}}
          envTag: ${{parameters.envTag}}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
